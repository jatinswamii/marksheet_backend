import { myDB } from '../utils/db/dbHelper'
import { myValue } from '../utils/coreUtils'

export const createYearSchema = async (year:number) => {
  try {
    if (myValue.isEmpty(year)) throw new Error('Empty Year')
    if (year < 2010 || year > 2200) throw new Error('Year should be greater than 2010')
    const schema = `y${year}`
    let sql = `SELECT schema_name FROM information_schema.schemata WHERE schema_name = '${schema}';`
    let res = await myDB.sqlQry({ sql })
    if (res.length > 0) throw new Error('Already exist')
    sql = `CREATE SCHEMA IF NOT EXISTS ${schema}`
    res = await myDB.sqlQry({ sql, qryexe: true })
    sql = `CREATE SCHEMA IF NOT EXISTS ${schema}`
    for (const sql of application_data(schema)) {
        res = await myDB.sqlQry({
            sql: sql,
            qryexe: true,
          })
    }
    for (const sql of application_payments(schema)) {
      res = await myDB.sqlQry({
          sql: sql,
          qryexe: true,
        })
  }
    for (const sql of logsTables(schema)) {
        res = await myDB.sqlQry({
            sql: sql,
            qryexe: true,
          })
    }
  } catch (e) {
    throw e
  }
}

const logsTables = (schema) => {
  let sqls = []
  sqls.push(`CREATE TABLE IF NOT EXISTS "${schema}"."log_broadcast_mails" (
        "log_id" int8 PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (
      INCREMENT 1
      MINVALUE  1
      MAXVALUE 9223372036854775807
      START 1
      CACHE 1
      ),
        "email" varchar COLLATE "pg_catalog"."default",
        "msg_id" int4,
        "message" varchar COLLATE "pg_catalog"."default",
        "status" varchar COLLATE "pg_catalog"."default",
        "timestamp" timestamp(6) DEFAULT CURRENT_TIMESTAMP
      );`)
  sqls.push(`CREATE TABLE IF NOT EXISTS "${schema}"."log_broadcast_sms" (
        "log_id" int8 PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (
      INCREMENT 1
      MINVALUE  1
      MAXVALUE 9223372036854775807
      START 1
      CACHE 1
      ),
        "mobile" int4,
        "msg_id" int4,
        "message" varchar COLLATE "pg_catalog"."default",
        "status" varchar COLLATE "pg_catalog"."default",
        "timestamp" timestamp(6) DEFAULT CURRENT_TIMESTAMP
      );`)
  sqls.push(`CREATE TABLE IF NOT EXISTS "${schema}"."log_broadcast_messages" (
        "msg_id" int8 Primary Key GENERATED BY DEFAULT AS IDENTITY (
            INCREMENT 1
            MINVALUE  1
            MAXVALUE 9223372036854775807
            START 1
            CACHE 1
            ),
        "categroyid" varchar COLLATE "pg_catalog"."default" NOT NULL,
        "filters" jsonb NOT NULL,
        "templateid" varchar COLLATE "pg_catalog"."default",
        "message" varchar COLLATE "pg_catalog"."default",
        "total_count" int4,
        "delivered_count" int4,
        "timestamp" timestamp(6) DEFAULT CURRENT_TIMESTAMP);`)
  return sqls
}
const application_data = (schema) => {
  const table = 'application_data'
  let sqls = []
  sqls.push(`CREATE TABLE IF NOT EXISTS "${schema}"."${table}" (
      "app_id" int8 NOT NULL,
      "module_id" int4 NOT NULL,
      "module_type" int2 NOT NULL,
      "cdid" int8 NOT NULL,
      "post_id" int4 NOT NULL,
      "module_data" jsonb,
      "specializations" jsonb,
      "data_status" int2 NOT NULL DEFAULT 0,
      "eligibility_status" int2 NOT NULL DEFAULT 0,
      "eligibility_remark" varchar COLLATE "pg_catalog"."default",
      "created_at" timestamp(6) DEFAULT now(),
      "updated_at" timestamp(6)
      );`)
  sqls.push(
    `ALTER TABLE "${schema}"."${table}" ADD CONSTRAINT "${table}_pkey" PRIMARY KEY ("app_id", "module_id", "module_type", "cdid");`,
  )
  sqls.push(`CREATE INDEX "${table}_md_gin" ON "${schema}"."${table}" USING gin (
        "module_data" "pg_catalog"."jsonb_ops"
      );`)
  sqls.push(`create trigger update_modified_time BEFORE UPDATE ON "${schema}"."${table}" FOR EACH ROW EXECUTE PROCEDURE update_modified_column()`)
  sqls.push(
    `ALTER TABLE "${schema}"."${table}" ADD CONSTRAINT "${table}_post_id_fpkey" FOREIGN KEY ("post_id") REFERENCES "main"."posts" ("post_id") ON DELETE NO ACTION ON UPDATE NO ACTION;`,
  )
  sqls.push(
    `ALTER TABLE "${schema}"."${table}" ADD CONSTRAINT "${table}__module_id_fpkey" FOREIGN KEY ("module_id") REFERENCES "main"."post_module_master" ("module_id") ON DELETE NO ACTION ON UPDATE NO ACTION;`,
  )
  sqls.push(
    `ALTER TABLE "${schema}"."${table}" ADD CONSTRAINT "${table}_app_id_fpkey" FOREIGN KEY ("app_id") REFERENCES "cms"."candidate_applications" ("app_id") ON DELETE NO ACTION ON UPDATE NO ACTION;`,
  )
  return sqls
}

const application_payments = (schema) => {
  const table = 'application_payments'
  let sqls = []
  sqls.push(`CREATE TABLE IF NOT EXISTS "${schema}"."${table}" (
      "app_id" int8 PRIMARY KEY NOT NULL,
      "pmode_code" int2 not null,
      "transaction_id" varchar(20) COLLATE "pg_catalog"."default" NOT NULL,
      "transaction_date" date NOT NULL,
      "amount" numeric(3,0) NOT NULL,
      "bank_code" varchar(2) COLLATE "pg_catalog"."default" NOT NULL,
      "branch_code" varchar(6) COLLATE "pg_catalog"."default",
      "tran_status" varchar(25) COLLATE "pg_catalog"."default",
      "transaction_code" varchar(25) COLLATE "pg_catalog"."default",
      "created_at" timestamp(6) DEFAULT now(),
      "updated_at" timestamp(6)
      );`)
  
  sqls.push(`create trigger update_modified_time BEFORE UPDATE ON "${schema}"."${table}" FOR EACH ROW EXECUTE PROCEDURE update_modified_column()`)
  sqls.push(
    `ALTER TABLE "${schema}"."${table}" ADD CONSTRAINT "${table}_app_id_fpkey" FOREIGN KEY ("app_id") REFERENCES "cms"."candidate_applications" ("app_id") ON DELETE NO ACTION ON UPDATE NO ACTION;`,
  )
  return sqls
}

